@model BugsMVC.Models.ViewModels.LocacionViewModel

@using BugsMVC.Models.ViewModels;

<div class="panel panel-default">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="panel-body">
            <div class="form-horizontal">
                @*<h4>Locación</h4>
        <hr />*@
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <input id="OperadorID" name="OperadorID" type="hidden" value="@ViewBag.OperadorID" />
                @Html.HiddenFor(model => model.LocacionID)
                @Html.HiddenFor(model => model.OperadorID)
                @Html.HiddenFor(model => model.EsSuperadmin)
                @Html.HiddenFor(model => model.MostrarUsuario)
                @Html.HiddenFor(model => model.SaludarUsuario)
                @Html.HiddenFor(model => model.MostrarDatosOpcionales)

                @Html.HiddenFor(model => model.Zona1Activa)
                @Html.HiddenFor(model => model.Zona2Activa)
                @Html.HiddenFor(model => model.Zona3Activa)
                @Html.HiddenFor(model => model.Zona4Activa)
                @Html.HiddenFor(model => model.Zona5Activa)


                <div class="form-group">
                    @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Numero, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Numero, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Numero, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-2"></label>
                    <div class="col-md-10">
                        <div id="panelDatos" class="panel panel-default">
                            <div class="panel-heading panel-heading-collapsed">
                                Datos opcionales
                                <a href="#" data-tool="panel-collapse" class="pull-right" id="IdPanelDatosOpcionales">
                                    <em class='fa @(Model.MostrarDatosOpcionales == true? "fa-minus" : "fa-plus")'></em>
                                </a>
                            </div>
                            <!-- .panel-wrapper is the element to be collapsed-->
                            <div id="panelDatosOpcionales" class="panel-wrapper collapse @(Model.MostrarDatosOpcionales == true? "in" : "")" aria-expanded="@(Model.MostrarDatosOpcionales == true? "true" : "false")">
                                <div class="panel-body">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.CUIT, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.CUIT, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.CUIT, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Direccion, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.Direccion, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Direccion, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Localidad, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.Localidad, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Localidad, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.CodigoPostal, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.CodigoPostal, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.CodigoPostal, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Provincia, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.Provincia, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Provincia, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div id="zonasContainer" class="col-md-offset-2 col-md-10">

                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="button" value="Agregar Zona" class="btn btn-default" onclick="agregarZona()" />
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Guardar" class="btn btn-default" />
                    </div>
                </div>

                <div class="zonaContainer hidden" zonaid="1">
                    <div class="form-group">
                        @Html.LabelFor(model => model.NombreZona1, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-7">
                            @Html.EditorFor(model => model.NombreZona1, new { htmlAttributes = new { @class = "form-control js-nombre-zona" } })
                            @Html.ValidationMessageFor(model => model.NombreZona1, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @*<div class="form-group">
                @Html.LabelFor(model => model.PeriodoRecargaZona1, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-7">
                    @Html.DropDownList("PeriodoRecargaZona1", EnumHelper.GetSelectList(typeof(LocacionViewModel.PeriodosRecarga)), "Seleccionar un período", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.PeriodoRecargaZona1, "", new { @class = "text-danger" })
                </div>
            </div>*@
                </div>

                <div class="zonaContainer hidden" zonaid="2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.NombreZona2, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-7">
                            @Html.EditorFor(model => model.NombreZona2, new { htmlAttributes = new { @class = "form-control js-nombre-zona" } })
                            @Html.ValidationMessageFor(model => model.NombreZona2, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @*<div class="form-group">
                @Html.LabelFor(model => model.PeriodoRecargaZona2, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-7">
                    @Html.DropDownList("PeriodoRecargaZona2", EnumHelper.GetSelectList(typeof(LocacionViewModel.PeriodosRecarga)), "Seleccionar un período", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.PeriodoRecargaZona2, "", new { @class = "text-danger" })
                </div>
            </div>*@
                </div>

                <div class="zonaContainer hidden" zonaid="3">
                    <div class="form-group">
                        @Html.LabelFor(model => model.NombreZona3, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-7">
                            @Html.EditorFor(model => model.NombreZona3, new { htmlAttributes = new { @class = "form-control js-nombre-zona" } })
                            @Html.ValidationMessageFor(model => model.NombreZona3, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @*<div class="form-group">
                @Html.LabelFor(model => model.PeriodoRecargaZona3, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-7">
                    @Html.DropDownList("PeriodoRecargaZona3", EnumHelper.GetSelectList(typeof(LocacionViewModel.PeriodosRecarga)), "Seleccionar un período", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.PeriodoRecargaZona3, "", new { @class = "text-danger" })
                </div>
            </div>*@
                </div>

                <div class="zonaContainer hidden" zonaid="4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.NombreZona4, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-7">
                            @Html.EditorFor(model => model.NombreZona4, new { htmlAttributes = new { @class = "form-control js-nombre-zona" } })
                            @Html.ValidationMessageFor(model => model.NombreZona4, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @*<div class="form-group">
                @Html.LabelFor(model => model.PeriodoRecargaZona4, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-7">
                    @Html.DropDownList("PeriodoRecargaZona4", EnumHelper.GetSelectList(typeof(LocacionViewModel.PeriodosRecarga)), "Seleccionar un período", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.PeriodoRecargaZona4, "", new { @class = "text-danger" })
                </div>
            </div>*@
                </div>

                <div class="zonaContainer hidden" zonaid="5">
                    <div class="form-group">
                        @Html.LabelFor(model => model.NombreZona5, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-7">
                            @Html.EditorFor(model => model.NombreZona5, new { htmlAttributes = new { @class = "form-control js-nombre-zona" } })
                            @Html.ValidationMessageFor(model => model.NombreZona5, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @*<div class="form-group">
                @Html.LabelFor(model => model.PeriodoRecargaZona5, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-7">
                    @Html.DropDownList("PeriodoRecargaZona5", EnumHelper.GetSelectList(typeof(LocacionViewModel.PeriodosRecarga)), "Seleccionar un período", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.PeriodoRecargaZona5, "", new { @class = "text-danger" })
                </div>
            </div>*@
                </div>

            </div>

            <div class="panel panel-default zonaPanel template hidden">
                <div class="panel-heading">
                        <a href="#" data-toggle="modal" data-target="#myModal" class="pull-right removeButton icono-plus">
                            <em class="fa fa-times"></em>
                        </a>                        
                    <a href="#" data-tool="panel-collapse" data-toggle="tooltip" title="Cerrar" class="pull-right">
                        <em class="fa fa-minus"></em>
                    </a>
                </div>
                <div class="panel-wrapper collapse in">
                    <div class="panel-body container">
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<div>
    @Html.ActionLink("Volver", "Index", "Locacion", null, new { @class = "btn btn-default" })
</div>

<script type="text/javascript">
    var selectedZona;
    var lastZona = 0;
    jQuery(document).ready(function ($) {
        $('body').append("<div id='myModal' tabindex='-1' role='dialog' aria-labelledby='myModalLabel' aria-hidden='true' class='modal fade'>" +
        "<div class='modal-dialog' role='document'> " +
        "<div class='modal-content'>" +
        "<div class='modal-header'> " +
        "<button type='button' class='close' data-dismiss='modal' aria-label='Close'><span aria-hidden='true'>&times;</span></button>" +
        "<h4 class='modal-title'>Remover Zona</h4>" + "</div>" +
           " <div class='modal-body'>" +
               " <p>¿ Desea Ud. remover la Zona seleccionada ?</p>" +
               "Se desasignaran las máquinas asociadas a esta zona" +
           " </div>" +
           " <div class='modal-footer'>" +
               " <button type='button' class='btn btn-primary' id='removeButton'>Confirmar</button>" +
               " <button type='button' class='btn btn-default' data-dismiss='modal'>Volver</button>" +
            "</div>" +
        "</div>" +
        " </div>" +
        "</div>"
        );

        $("#IdPanelDatosOpcionales").on("click",function() {
            if ($("#MostrarDatosOpcionales").val() == "True") {
                $("#MostrarDatosOpcionales").val("False");
            }else {
                $("#MostrarDatosOpcionales").val("True");
            }
        });

        if (! @Json.Encode(ViewBag.HasZona1)) {
            agregarZona();
        }

        $('div.zonaContainer.hidden').each(function (index) {
            var zonaContainer = $(this);
            //var showItem = false;
            console.log(this);

            $('input[type="number"]', zonaContainer).each(function () {
                var strValue = $(this).attr('value').replace(',', '.');
                $(this).attr('value', strValue);
                $(this).val(strValue);
            });

            $('.js-nombre-zona', zonaContainer).each(function () {
                if ($(this).val().length > 0) {
                    //showItem = true;
                    return false;
                }
            });

            $('.js-budget-zona', zonaContainer).each(function () {
                if ($(this).val() > 0) {
                    //showItem = true;
                    return false;
                }
            });

            var zonaIndex = zonaContainer.attr("zonaId");
            var showItem = $("#Zona" + zonaIndex + "Activa").val() == "True";
            if (showItem) {
                agregarZona();
                //var zonaPanel = $('div.zonaPanel.template').clone();

                //$('div.panel-body.container', zonaPanel).append(zonaContainer);
                //$('div.panel-heading', zonaPanel).prepend('Zona ' + zonaContainer.attr('zonaId'));

                //$('div.panel-body.container', zonaPanel).closest('.panel.panel-default.zonaPanel').attr('selectedzonaid', zonaContainer.attr('zonaid'));

                //$('div.panel-heading a.removeButton', zonaPanel).click(function () {
                //    selectedZona = $(this).closest('.panel.panel-default.zonaPanel').attr('selectedzonaid');
                //});

                //zonaPanel.removeClass('template');
                //zonaPanel.removeClass('hidden');
                //zonaContainer.removeClass('hidden');

                //var nroZona = zonaContainer.attr('zonaid');

                //if (nroZona <= 10) {
                //    $('#zonasContainer').append(zonaPanel);
                //}
            }
        });

        $("#removeButton").click(function (e) {
            shiftZonesUp(selectedZona, lastZona);
            var element = $('div.zonaContainer[zonaId=' + lastZona + ']')
            $('div.form-horizontal').append(element);
            element.addClass('hidden');
            var lastElement = $("#NombreZona" + lastZona)
            lastElement.val(null);
            lastElement.change();

            $('div[selectedzonaid=' + lastZona + ']').remove();
            $('#myModal').modal('toggle');
            $("#Zona" + (lastZona) + "Activa").val("False");
            lastZona--;
        });
    });

    function shiftZonesUp(deletedZone, lastZone) {
        var deletedInt = parseInt(deletedZone);
        for (var i = deletedInt; i < lastZone; i++) {
            source = $("#NombreZona" + (i+1));
            dest = $("#NombreZona" + i);
            console.log("source", source.val());
            console.log("dest", dest.val());
            dest.val(source.val());
            dest.change();
        }
    }

    function agregarZona() {
        //var zonaContainer = getSorted('div.zonaContainer.hidden', 'zonaId').first();
        var zonaContainer = $('div.zonaContainer.hidden[zonaId=' + (lastZona+1) + ']');
        var zonaPanel = $('div.zonaPanel.template').clone();
        $('div.panel-body.container', zonaPanel).append(zonaContainer);
        $('div.panel-heading', zonaPanel).prepend('Zona ' + zonaContainer.attr('zonaid'));

        $('div.panel-body.container', zonaPanel).closest('.panel.panel-default.zonaPanel').attr('selectedzonaid', zonaContainer.attr('zonaid'));

        $('div.panel-heading a.removeButton', zonaPanel).click(function () {
            selectedZona = $(this).closest('.panel.panel-default.zonaPanel').attr('selectedzonaid');
        });

        zonaPanel.removeClass('template');
        zonaPanel.removeClass('hidden');
        zonaContainer.removeClass('hidden');

        var nroZona = zonaContainer.attr('zonaid');


        if (nroZona <= 10) {
            $('#zonasContainer').append(zonaPanel);
        }

        $("#Zona"+(lastZona+1)+"Activa").val("True");
        lastZona = lastZona + 1;
        console.log(lastZona);

        return false;
    }

    function getSorted(selector, attrName) {
        return $($(selector).toArray().sort(function (a, b) {
            var aVal = parseInt(a.getAttribute(attrName)),
                bVal = parseInt(b.getAttribute(attrName));
            return aVal - bVal;
        }));
    }
</script>

